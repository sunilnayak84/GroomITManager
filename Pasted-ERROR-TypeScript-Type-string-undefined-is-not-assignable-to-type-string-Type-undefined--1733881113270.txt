ERROR(TypeScript)  Type 'string | undefined' is not assignable to type 'string'.
  Type 'undefined' is not assignable to type 'string'.
 FILE  /home/runner/GroomITManager/client/src/components/InventoryUsageHistory.tsx:98:43

     96 |             <SelectItem value="all">All Services</SelectItem>
     97 |             {uniqueServices.map((serviceId) => (
  >  98 |               <SelectItem key={serviceId} value={serviceId}>
        |                                           ^^^^^
     99 |                 Service {serviceId}
    100 |               </SelectItem>
    101 |             ))}

 ERROR(TypeScript)  Type 'Gender' is not assignable to type '"unknown" | "male" | "female" | null | undefined'.
  Type '"other"' is not assignable to type '"unknown" | "male" | "female" | null | undefined'.
 FILE  /home/runner/GroomITManager/client/src/components/PetForm.tsx:73:7

    71 |       dateOfBirth: defaultValues?.dateOfBirth ?? null,
    72 |       age: defaultValues?.age ? Number(defaultValues.age) : null,
  > 73 |       gender: defaultValues?.gender ?? "unknown",
       |       ^^^^^^
    74 |       weight: defaultValues?.weight ? String(defaultValues.weight) : null,
    75 |       weightUnit: defaultValues?.weightUnit ?? "kg",
    76 |       image: defaultValues?.image ?? null,

 ERROR(TypeScript)  Property 'owner' does not exist on type 'Partial<InsertPet>'.
 FILE  /home/runner/GroomITManager/client/src/components/PetForm.tsx:149:27

    147 |       
    148 |       const ownerData = hideCustomerField
  > 149 |         ? (defaultValues?.owner ?? null)
        |                           ^^^^^
    150 |         : {
    151 |             id: effectiveCustomerId,
    152 |             name: `${selectedCustomer.firstName || ''} ${selectedCustomer.lastName || ''}`.trim() || 'Unknown',

 ERROR(TypeScript)  Object literal may only specify known properties, and 'owner' does not exist in type 'InsertPet'.
 FILE  /home/runner/GroomITManager/client/src/components/PetForm.tsx:168:9

    166 |         notes: data.notes || null,
    167 |         image: data.image,
  > 168 |         owner: ownerData
        |         ^^^^^
    169 |       };
    170 |
    171 |       const result = await submitForm(petData);

 ERROR(TypeScript)  Property 'owner' does not exist on type 'Partial<InsertPet>'.
 FILE  /home/runner/GroomITManager/client/src/components/PetForm.tsx:197:125

    195 |       setIsSubmitting(false);
    196 |     }
  > 197 |   }, [isSubmitting, customers, submitForm, form, onSuccess, toast, isEditing, hideCustomerField, customerId, defaultValues?.owner, onError]);
        |                                                                                                                             ^^^^^
    198 |
    199 |   if (!hideCustomerField && customers.length === 0) {
    200 |     return (

 ERROR(TypeScript)  Argument of type 'AppointmentDocumentData' is not assignable to parameter of type 'WithFieldValue<{ date: Date; id: number; createdAt: Date | null; branchId: number; updatedAt: Date | null; notes: string | null; petId: number; serviceId: number; groomerId: string; status: string; productsUsed: string | null; }>'.
  Type 'AppointmentDocumentData' is missing the following properties from type '{ date: FieldValue | WithFieldValue<Date>; id: number | FieldValue; createdAt: FieldValue | WithFieldValue<Date | null>; ... 7 more ...; productsUsed: FieldValue | WithFieldValue<...>; }': id, updatedAt
 FILE  /home/runner/GroomITManager/client/src/hooks/use-appointments.ts:131:59

    129 |
    130 |       // Add the document to Firestore
  > 131 |       const docRef = await addDoc(appointmentsCollection, baseData);
        |                                                           ^^^^^^^^
    132 |       
    133 |       // Construct the return data with the correct type
    134 |       const returnData = {

 ERROR(TypeScript)  Property 'createdAt' does not exist on type 'InsertCustomer'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:63:31

    61 |         const id = await createCustomer({
    62 |           ...customer,
  > 63 |           createdAt: customer.createdAt || new Date(),
       |                               ^^^^^^^^^
    64 |           petCount: 0 // Initialize petCount
    65 |         });
    66 |

 ERROR(TypeScript)  Property 'createdAt' does not exist on type 'InsertCustomer'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:74:31

    72 |           ...customer,
    73 |           petCount: 0,
  > 74 |           createdAt: customer.createdAt || new Date()
       |                               ^^^^^^^^^
    75 |         };
    76 |       } catch (error) {
    77 |         // Log the full error details

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:94:13

    92 |     onSuccess: () => {
    93 |       queryClient.invalidateQueries({ queryKey: ["customers"] });
  > 94 |       toast.success("Customer added successfully");
       |             ^^^^^^^
    95 |     },
    96 |     onError: (error) => {
    97 |       console.error('ADD_CUSTOMER: Mutation error', { error });

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:98:13

     96 |     onError: (error) => {
     97 |       console.error('ADD_CUSTOMER: Mutation error', { error });
  >  98 |       toast.error(
        |             ^^^^^
     99 |         error instanceof Error 
    100 |           ? error.message 
    101 |           : "Failed to add customer. Please try again."

 ERROR(TypeScript)  Argument of type 'Partial<Omit<{ id: number; email: string; phone: string; address: string | null; createdAt: string | null; updatedAt: string | null; firebaseId: string | null; firstName: string; lastName: string; gender: "male" | ... 2 more ... | null; petCount: number; }, "id">>' is not assignable to parameter of type 'Partial<{ id: number; email: string; phone: string; address: string | null; createdAt: Date | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }>'.
  Types of property 'createdAt' are incompatible.
    Type 'string | null | undefined' is not assignable to type 'Date | null | undefined'.
      Type 'string' is not assignable to type 'Date'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:108:35

    106 |   const updateCustomerMutation = useMutation({
    107 |     mutationFn: async ({ id, data }: { id: string; data: Partial<Omit<CustomerType, 'id'>> }) => {
  > 108 |       await updateCustomerDoc(id, data);
        |                                   ^^^^
    109 |       return {
    110 |         id,
    111 |         ...data

 ERROR(TypeScript)  This comparison appears to be unintentional because the types 'number' and 'string' have no overlap.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:146:33

    144 |       // Optimistically update the cache
    145 |       queryClient.setQueryData<CustomerType[]>(["customers"], old => 
  > 146 |         old?.filter(customer => customer.id !== String(deletedId)) || []
        |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    147 |       );
    148 |
    149 |       return { previousCustomers };

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:153:13

    151 |     onSuccess: (deletedId) => {
    152 |       console.log('Delete mutation succeeded for customer:', deletedId);
  > 153 |       toast.success("Customer deleted successfully");
        |             ^^^^^^^
    154 |     },
    155 |     onError: (error, _, context) => {
    156 |       console.error('Delete mutation error:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:161:13

    159 |         queryClient.setQueryData(["customers"], context.previousCustomers);
    160 |       }
  > 161 |       toast.error(
        |             ^^^^^
    162 |         error instanceof Error 
    163 |           ? error.message 
    164 |           : "Unable to delete customer"

 ERROR(TypeScript)  Conversion of type '{ createdAt: Date | undefined; id: number; email: string; phone: string; address: string | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }' to type '{ id: number; email: string; phone: string; address: string | null; createdAt: string | null; updatedAt: string | null; firebaseId: string | null; firstName: string; lastName: string; gender: "male" | ... 2 more ... | null; petCount: number; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'updatedAt' is missing in type '{ createdAt: Date | undefined; id: number; email: string; phone: string; address: string | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }' but required in type '{ id: number; email: string; phone: string; address: string | null; createdAt: string | null; updatedAt: string | null; firebaseId: string | null; firstName: string; lastName: string; gender: "male" | ... 2 more ... | null; petCount: number; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:181:16

    179 |       const customers = snapshot.docs.map(doc => {
    180 |         const customerData = doc.data();
  > 181 |         return {
        |                ^
  > 182 |           id: doc.id,
        | ^^^^^^^^^^^^^^^^^^^^^
  > 183 |           ...customerData,
        | ^^^^^^^^^^^^^^^^^^^^^
  > 184 |           createdAt: customerData.createdAt 
        | ^^^^^^^^^^^^^^^^^^^^^
  > 185 |             ? new Date(customerData.createdAt) 
        | ^^^^^^^^^^^^^^^^^^^^^
  > 186 |             : undefined
        | ^^^^^^^^^^^^^^^^^^^^^
  > 187 |         } as CustomerType;
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    188 |       });
    189 |
    190 |       // Update customers in cache

 ERROR(TypeScript)  'id' is specified more than once, so this usage will be overwritten.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:182:11

    180 |         const customerData = doc.data();
    181 |         return {
  > 182 |           id: doc.id,
        |           ^^^^^^^^^^
    183 |           ...customerData,
    184 |           createdAt: customerData.createdAt 
    185 |             ? new Date(customerData.createdAt) 

 ERROR(TypeScript)  Argument of type 'number' is not assignable to parameter of type 'string'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:214:35

    212 |         const updatedCustomers = currentCustomers.map(customer => ({
    213 |           ...customer,
  > 214 |           petCount: petCounts.get(customer.id) || 0
        |                                   ^^^^^^^^^^^
    215 |         }));
    216 |
    217 |         // Update cache without triggering a refetch

 ERROR(TypeScript)  'id' is specified more than once, so this usage will be overwritten.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:239:13

    237 |           const customerData = doc.data();
    238 |           const customer = {
  > 239 |             id: doc.id,
        |             ^^^^^^^^^^
    240 |             firebaseId: doc.id, // Explicitly add firebaseId for component usage
    241 |             ...customerData,
    242 |             // Ensure createdAt is a valid Date object

 ERROR(TypeScript)  'firebaseId' is specified more than once, so this usage will be overwritten.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:240:13

    238 |           const customer = {
    239 |             id: doc.id,
  > 240 |             firebaseId: doc.id, // Explicitly add firebaseId for component usage
        |             ^^^^^^^^^^^^^^^^^^
    241 |             ...customerData,
    242 |             // Ensure createdAt is a valid Date object
    243 |             createdAt: customerData.createdAt 

 ERROR(TypeScript)  Type 'Date' is not assignable to type 'string'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:243:13

    241 |             ...customerData,
    242 |             // Ensure createdAt is a valid Date object
  > 243 |             createdAt: customerData.createdAt 
        |             ^^^^^^^^^
    244 |               ? new Date(customerData.createdAt) 
    245 |               : new Date(),
    246 |             petCount: customerData.petCount || 0,

 ERROR(TypeScript)  Type 'string | null' is not assignable to type '"male" | "female" | "other" | null'.
  Type 'string' is not assignable to type '"male" | "female" | "other" | null'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:247:13

    245 |               : new Date(),
    246 |             petCount: customerData.petCount || 0,
  > 247 |             gender: customerData.gender || null
        |             ^^^^^^
    248 |           } satisfies CustomerType;
    249 |           console.log('FETCH_CUSTOMERS: Processed customer:', {
    250 |             id: customer.id,

 ERROR(TypeScript)  Argument of type 'Date | null' is not assignable to parameter of type 'Timestamp | null | undefined'.
  Type 'Date' is missing the following properties from type 'Timestamp': seconds, nanoseconds, toDate, toMillis, isEqual
 FILE  /home/runner/GroomITManager/client/src/hooks/use-pets.ts:125:40

    123 |           weightUnit: petData.weightUnit || 'kg',
    124 |           notes: petData.notes || null,
  > 125 |           createdAt: timestampToString(petData.createdAt) || new Date().toISOString(),
        |                                        ^^^^^^^^^^^^^^^^^
    126 |           updatedAt: timestampToString(petData.updatedAt),
    127 |           owner: customerDetails || null
    128 |         };

 ERROR(TypeScript)  Property 'updatedAt' does not exist on type '{ id: number; firebaseId: string | null; name: string; gender: string | null; createdAt: Date | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; age: number | null; weight: string | null; weightUnit: string | null; image: string | null; notes: string | null; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-pets.ts:126:48

    124 |           notes: petData.notes || null,
    125 |           createdAt: timestampToString(petData.createdAt) || new Date().toISOString(),
  > 126 |           updatedAt: timestampToString(petData.updatedAt),
        |                                                ^^^^^^^^^
    127 |           owner: customerDetails || null
    128 |         };
    129 |       });

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:99:13

     97 |       await setDoc(docRef, firestoreData);
     98 |       await queryClient.invalidateQueries({ queryKey: ['services'] });
  >  99 |       toast.success('Service added successfully');
        |             ^^^^^^^
    100 |       return newService;
    101 |     } catch (error) {
    102 |       console.error('ADD_SERVICE: Error adding service:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:103:13

    101 |     } catch (error) {
    102 |       console.error('ADD_SERVICE: Error adding service:', error);
  > 103 |       toast.error(error instanceof Error ? error.message : 'Failed to add service');
        |             ^^^^^
    104 |       throw error;
    105 |     }
    106 |   };

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:129:13

    127 |       await updateDoc(serviceRef, updatePayload);
    128 |       await queryClient.invalidateQueries({ queryKey: ['services'] });
  > 129 |       toast.success('Service updated successfully');
        |             ^^^^^^^
    130 |       return true;
    131 |     } catch (error) {
    132 |       console.error('UPDATE_SERVICE: Error updating service:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:133:13

    131 |     } catch (error) {
    132 |       console.error('UPDATE_SERVICE: Error updating service:', error);
  > 133 |       toast.error(error instanceof Error ? error.message : 'Failed to update service');
        |             ^^^^^
    134 |       throw error;
    135 |     }
    136 |   };

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:143:13

    141 |       await deleteDoc(serviceRef);
    142 |       await queryClient.invalidateQueries({ queryKey: ['services'] });
  > 143 |       toast.success('Service deleted successfully');
        |             ^^^^^^^
    144 |       return true;
    145 |     } catch (error) {
    146 |       console.error('DELETE_SERVICE: Error deleting service:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:147:13

    145 |     } catch (error) {
    146 |       console.error('DELETE_SERVICE: Error deleting service:', error);
  > 147 |       toast.error(error instanceof Error ? error.message : 'Failed to delete service');
        |             ^^^^^
    148 |       throw error;
    149 |     }
    150 |   };

 ERROR(TypeScript)  Argument of type '{ email: string; name: string; phone: string; role: string; isActive: boolean; createdAt: Date; branchId: number | null; isGroomer: boolean; specialties: string[]; petTypePreferences: string[]; ... 4 more ...; updatedAt: null; }' is not assignable to parameter of type 'WithFieldValue<{ id: string; email: string; name: string; phone: string; role: string; isActive: boolean; createdAt: Date | null; branchId: number | null; isGroomer: boolean; specialties: string[] | null; ... 5 more ...; updatedAt: Date | null; }>'.
  Property 'id' is missing in type '{ email: string; name: string; phone: string; role: string; isActive: boolean; createdAt: Date; branchId: number | null; isGroomer: boolean; specialties: string[]; petTypePreferences: string[]; ... 4 more ...; updatedAt: null; }' but required in type '{ id: string | FieldValue; email: string | FieldValue; name: string | FieldValue; phone: string | FieldValue; role: string | FieldValue; ... 10 more ...; updatedAt: FieldValue | WithFieldValue<...>; }'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:50:27

    48 |     };
    49 |
  > 50 |     await setDoc(userRef, userData);
       |                           ^^^^^^^^
    51 |     return true;
    52 |   } catch (error) {
    53 |     console.error('Error creating user document:', error);

 ERROR(TypeScript)  Argument of type '{ firstName: string; lastName: string; email: string; phone: string; address: string | null; gender: string | null; petCount: number; firebaseId: null; createdAt: Date; }' is not assignable to parameter of type 'WithFieldValue<{ id: number; email: string; phone: string; address: string | null; createdAt: Date | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }>'.
  Property 'id' is missing in type '{ firstName: string; lastName: string; email: string; phone: string; address: string | null; gender: string | null; petCount: number; firebaseId: null; createdAt: Date; }' but required in type '{ id: number | FieldValue; email: string | FieldValue; phone: string | FieldValue; address: FieldValue | WithFieldValue<string | null>; ... 5 more ...; petCount: number | FieldValue; }'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:100:31

     98 |
     99 |     // Save to Firestore
  > 100 |     await setDoc(customerRef, customerData);
        |                               ^^^^^^^^^^^^
    101 |     
    102 |     console.log('FIRESTORE: Customer created successfully', { id: customerRef.id });
    103 |     return customerRef.id;

 ERROR(TypeScript)  Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Omit<{ id: number; name: string; createdAt: Date | null; firebaseId: string | null; gender: string | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; ... 4 more ...; notes: string | null; }, "id">'.
  No index signature with a parameter of type 'string' was found on type 'Omit<{ id: number; name: string; createdAt: Date | null; firebaseId: string | null; gender: string | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; ... 4 more ...; notes: string | null; }, "id">'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:127:12

    125 |     const requiredFields = ['name', 'type', 'breed', 'customerId'];
    126 |     for (const field of requiredFields) {
  > 127 |       if (!pet[field]) {
        |            ^^^^^^^^^^
    128 |         throw new Error(`Missing required field: ${field}`);
    129 |       }
    130 |     }

 ERROR(TypeScript)  No overload matches this call.
  Overload 1 of 3, '(firestore: Firestore, path: string, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>', gave the following error.
    Argument of type 'CollectionReference<{ id: number; email: string; phone: string; address: string | null; createdAt: Date | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }, DocumentData>' is not assignable to parameter of type 'Firestore'.
      Type 'CollectionReference<{ id: number; email: string; phone: string; address: string | null; createdAt: Date | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }, DocumentData>' is missing the following properties from type 'Firestore': app, toJSON
  Overload 2 of 3, '(reference: CollectionReference<{ id: number; email: string; phone: string; address: string | null; createdAt: Date | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }, DocumentData>, path?: string | undefined, ...pathSegments: string[]): DocumentReference<...>', gave the following error.
    Argument of type 'number' is not assignable to parameter of type 'string'.
  Overload 3 of 3, '(reference: DocumentReference<DocumentData, DocumentData>, path: string, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>', gave the following error.
    Argument of type 'CollectionReference<{ id: number; email: string; phone: string; address: string | null; createdAt: Date | null; firebaseId: string | null; firstName: string; lastName: string; gender: string | null; petCount: number; }, DocumentData>' is not assignable to parameter of type 'DocumentReference<DocumentData, DocumentData>'.
      Types of property 'type' are incompatible.
        Type '"collection"' is not assignable to type '"document"'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:133:25

    131 |
    132 |     // Create references
  > 133 |     const customerRef = doc(customersCollection, pet.customerId);
        |                         ^^^
    134 |     const petRef = doc(petsCollection);
    135 |     const submissionId = pet.submissionId || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    136 |

 ERROR(TypeScript)  Property 'submissionId' does not exist on type 'Omit<{ id: number; name: string; createdAt: Date | null; firebaseId: string | null; gender: string | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; ... 4 more ...; notes: string | null; }, "id">'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:135:30

    133 |     const customerRef = doc(customersCollection, pet.customerId);
    134 |     const petRef = doc(petsCollection);
  > 135 |     const submissionId = pet.submissionId || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        |                              ^^^^^^^^^^^^
    136 |
    137 |     // Use a transaction to create pet and update customer count atomically
    138 |     const result = await runTransaction(db, async (transaction) => {

 ERROR(TypeScript)  Argument of type '{ id: string; submissionId: any; createdAt: string; updatedAt: string; name: string; firebaseId: string | null; gender: string | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; ... 4 more ...; notes: string | null; }' is not assignable to parameter of type 'WithFieldValue<{ id: number; name: string; createdAt: Date | null; firebaseId: string | null; gender: string | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; ... 4 more ...; notes: string | null; }>'.
  Type '{ id: string; submissionId: any; createdAt: string; updatedAt: string; name: string; firebaseId: string | null; gender: string | null; customerId: number; type: string; breed: string; dateOfBirth: string | null; ... 4 more ...; notes: string | null; }' is not assignable to type '{ id: number | FieldValue; name: string | FieldValue; createdAt: FieldValue | WithFieldValue<Date | null>; firebaseId: FieldValue | WithFieldValue<...>; ... 9 more ...; notes: FieldValue | WithFieldValue<...>; }'.
    Types of property 'id' are incompatible.
      Type 'string' is not assignable to type 'number | FieldValue'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:187:33

    185 |
    186 |         // Create pet document
  > 187 |         transaction.set(petRef, petData);
        |                                 ^^^^^^^
    188 |
    189 |         // Update customer's pet count
    190 |         transaction.update(customerRef, {

 ERROR(TypeScript)  'id' is specified more than once, so this usage will be overwritten.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:198:13

    196 |           success: true, 
    197 |           pet: { 
  > 198 |             id: petRef.id, 
        |             ^^^^^^^^^^^^^
    199 |             ...petData 
    200 |           } 
    201 |         };

 ERROR(TypeScript)  Argument of type '{ createdAt: Date; date: Date; branchId: number; updatedAt: Date | null; notes: string | null; petId: number; serviceId: number; groomerId: string; status: string; productsUsed: string | null; }' is not assignable to parameter of type 'WithFieldValue<{ date: Date; id: number; createdAt: Date | null; branchId: number; updatedAt: Date | null; notes: string | null; petId: number; serviceId: number; groomerId: string; status: string; productsUsed: string | null; }>'.
  Property 'id' is missing in type '{ createdAt: Date; date: Date; branchId: number; updatedAt: Date | null; notes: string | null; petId: number; serviceId: number; groomerId: string; status: string; productsUsed: string | null; }' but required in type '{ date: FieldValue | WithFieldValue<Date>; id: number | FieldValue; createdAt: FieldValue | WithFieldValue<Date | null>; ... 7 more ...; productsUsed: FieldValue | WithFieldValue<...>; }'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:223:34

    221 |   try {
    222 |     const appointmentRef = doc(appointmentsCollection);
  > 223 |     await setDoc(appointmentRef, {
        |                                  ^
  > 224 |       ...appointment,
        | ^^^^^^^^^^^^^^^^^^^^^
  > 225 |       createdAt: new Date()
        | ^^^^^^^^^^^^^^^^^^^^^
  > 226 |     });
        | ^^^^^^
    227 |     return appointmentRef.id;
    228 |   } catch (error) {
    229 |     console.error('Error creating appointment:', error);

 ERROR(TypeScript)  Type 'any' is not assignable to type 'never'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:255:9

    253 |     const cleanedData = Object.entries(processedData).reduce<Partial<Customer> & { updatedAt: string }>((acc, [key, value]) => {
    254 |       if (value !== undefined) {
  > 255 |         acc[key as keyof (Partial<Customer> & { updatedAt: string })] = value as any;
        |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    256 |       }
    257 |       return acc;
    258 |     }, { updatedAt: new Date().toISOString() });

 ERROR(TypeScript)  Type 'any' is not assignable to type 'never'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:346:9

    344 |     const cleanedData = Object.entries(updateData).reduce<Partial<Pet> & { updatedAt: string }>((acc, [key, value]) => {
    345 |       if (value !== undefined) {
  > 346 |         acc[key as keyof (Partial<Pet> & { updatedAt: string })] = value as any;
        |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    347 |       }
    348 |       return acc;
    349 |     }, { updatedAt: new Date().toISOString() });

 ERROR(TypeScript)  Property 'updatedAt' does not exist on type '{ createdAt: Date; petCount: number; gender: string | null; id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:98:27

     96 |       gender: customer.gender as "male" | "female" | "other" | null,
     97 |       createdAt: typeof customer.createdAt === 'string' ? customer.createdAt : new Date().toISOString(),
  >  98 |       updatedAt: customer.updatedAt ? new Date(customer.updatedAt).toISOString() : null,
        |                           ^^^^^^^^^
     99 |       petCount: customer.petCount || 0
    100 |     }));
    101 |   }, [customersQuery.data]);

 ERROR(TypeScript)  Property 'updatedAt' does not exist on type '{ createdAt: Date; petCount: number; gender: string | null; id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:98:57

     96 |       gender: customer.gender as "male" | "female" | "other" | null,
     97 |       createdAt: typeof customer.createdAt === 'string' ? customer.createdAt : new Date().toISOString(),
  >  98 |       updatedAt: customer.updatedAt ? new Date(customer.updatedAt).toISOString() : null,
        |                                                         ^^^^^^^^^
     99 |       petCount: customer.petCount || 0
    100 |     }));
    101 |   }, [customersQuery.data]);

 ERROR(TypeScript)  Object literal may only specify known properties, and 'createdAt' does not exist in type 'InsertCustomer'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:281:9

    279 |       await addCustomerMutation.mutateAsync({
    280 |         ...data,
  > 281 |         createdAt: new Date(),
        |         ^^^^^^^^^
    282 |         address: data.address || null
    283 |       });
    284 |

 ERROR(TypeScript)  Type 'Date' is not assignable to type 'string'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:327:11

    325 |         data: {
    326 |           ...data,
  > 327 |           createdAt: selectedCustomer.createdAt || new Date(),
        |           ^^^^^^^^^
    328 |         }
    329 |       });
    330 |       

 ERROR(TypeScript)  Type '{ id: string; gender: "male" | "female" | "other" | null; createdAt: string; updatedAt: string | null; petCount: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }[]' is not assignable to type 'Customer[]'.
  Type '{ id: string; gender: "male" | "female" | "other" | null; createdAt: string; updatedAt: string | null; petCount: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }' is not assignable to type 'Customer'.
    Types of property 'createdAt' are incompatible.
      Type 'string' is not assignable to type 'Date'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:529:13

    527 |           <DataTable 
    528 |             columns={columns} 
  > 529 |             data={customersData} 
        |             ^^^^
    530 |           />
    531 |         )}
    532 |       </div>

 ERROR(TypeScript)  Type '{ type: "dog" | "cat" | "bird" | "fish" | "other"; gender: "male" | "female" | "unknown" | null; customerId: string; createdAt: string; updatedAt: string | null; id: string; name: string; ... 7 more ...; owner: { ...; } | null; }' is not assignable to type 'Pet'.
  Types of property 'weightUnit' are incompatible.
    Type 'string' is not assignable to type 'WeightUnit'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:587:31

    585 |                       className="ml-auto"
    586 |                       onClick={() => {
  > 587 |                         const typedPet: Pet = {
        |                               ^^^^^^^^
    588 |                           ...pet,
    589 |                           type: pet.type as "dog" | "cat" | "bird" | "fish" | "other",
    590 |                           gender: pet.gender as "male" | "female" | "unknown" | null,

 ERROR(TypeScript)  Cannot find name 'InsertPet'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:624:36

    622 |                   try {
    623 |                     // Ensure proper type conversion and validation
  > 624 |                     const petData: InsertPet = {
        |                                    ^^^^^^^^^
    625 |                       name: data.name,
    626 |                       type: data.type,
    627 |                       breed: data.breed,

 ERROR(TypeScript)  Type '{ createdAt: Date; petCount: number; gender: string | null; id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }[]' is not assignable to type '{ id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; gender: "other" | "male" | "female" | null; petCount: number; createdAt: string | null; updatedAt: string | null; }[]'.
  Property 'updatedAt' is missing in type '{ createdAt: Date; petCount: number; gender: string | null; id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }' but required in type '{ id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; gender: "other" | "male" | "female" | null; petCount: number; createdAt: string | null; updatedAt: string | null; }'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:677:17

    675 |                 hideCustomerField={true}
    676 |                 customerId={selectedCustomer.id}
  > 677 |                 customers={customersQuery.data || []}
        |                 ^^^^^^^^^
    678 |                 onCancel={() => setShowAddPet(false)}
    679 |               />
    680 |             </div>

 ERROR(TypeScript)  Argument of type '{ id: string; customerId: string; name: string; type: string; breed: string; image: string | null; dateOfBirth: string | null; age: number | null; gender: string | null; weight: number | null; ... 4 more ...; owner: { ...; } | null; }' is not assignable to parameter of type 'SetStateAction<Pet | null>'.
  Type '{ id: string; customerId: string; name: string; type: string; breed: string; image: string | null; dateOfBirth: string | null; age: number | null; gender: string | null; weight: number | null; ... 4 more ...; owner: { ...; } | null; }' is not assignable to type 'Pet'.
    Types of property 'type' are incompatible.
      Type 'string' is not assignable to type 'PetType'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:921:46

    919 |                             className="ml-auto"
    920 |                             onClick={() => {
  > 921 |                               setSelectedPet(pet);
        |                                              ^^^
    922 |                               setShowPetDetails(true);
    923 |                             }}
    924 |                           >

 ERROR(TypeScript)  Type 'import("/home/runner/GroomITManager/client/src/lib/types").Gender | null' is not assignable to type 'import("/home/runner/GroomITManager/client/src/hooks/use-pets").Gender | null'.
  Type '"other"' is not assignable to type 'Gender | null'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:82:7

    80 |       dateOfBirth: formData.dateOfBirth || null,
    81 |       age: formData.age || null,
  > 82 |       gender: formData.gender || null,
       |       ^^^^^^
    83 |       weight: formData.weight || null,
    84 |       weightUnit: formData.weightUnit,
    85 |       notes: formData.notes || null,

 ERROR(TypeScript)  Type 'string | null' is not assignable to type 'number | null'.
  Type 'string' is not assignable to type 'number'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:83:7

    81 |       age: formData.age || null,
    82 |       gender: formData.gender || null,
  > 83 |       weight: formData.weight || null,
       |       ^^^^^^
    84 |       weightUnit: formData.weightUnit,
    85 |       notes: formData.notes || null,
    86 |       image: typeof formData.image === 'string' ? formData.image : selectedPet.image,

 ERROR(TypeScript)  Type 'WeightUnit | undefined' is not assignable to type 'WeightUnit'.
  Type 'undefined' is not assignable to type 'WeightUnit'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:84:7

    82 |       gender: formData.gender || null,
    83 |       weight: formData.weight || null,
  > 84 |       weightUnit: formData.weightUnit,
       |       ^^^^^^^^^^
    85 |       notes: formData.notes || null,
    86 |       image: typeof formData.image === 'string' ? formData.image : selectedPet.image,
    87 |       owner: formData.owner || null,

 ERROR(TypeScript)  Property 'owner' does not exist on type 'InsertPet'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:87:23

    85 |       notes: formData.notes || null,
    86 |       image: typeof formData.image === 'string' ? formData.image : selectedPet.image,
  > 87 |       owner: formData.owner || null,
       |                       ^^^^^
    88 |       updatedAt: new Date().toISOString(),
    89 |     };
    90 |

 ERROR(TypeScript)  Type 'InsertPet' is not assignable to type 'Partial<PetInput>'.
  Types of property 'gender' are incompatible.
    Type 'import("/home/runner/GroomITManager/client/src/lib/types").Gender | null | undefined' is not assignable to type 'import("/home/runner/GroomITManager/client/src/hooks/use-pets").Gender | null | undefined'.
      Type '"other"' is not assignable to type 'Gender | null | undefined'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:99:9

     97 |       await updatePet({ 
     98 |         petId: selectedPet.id, 
  >  99 |         updateData: formData
        |         ^^^^^^^^^^
    100 |       });
    101 |       
    102 |       setOptimisticPets(prev => {

 ERROR(TypeScript)  Argument of type 'InsertPet' is not assignable to parameter of type 'PetInput'.
  Types of property 'gender' are incompatible.
    Type 'import("/home/runner/GroomITManager/client/src/lib/types").Gender | null | undefined' is not assignable to type 'import("/home/runner/GroomITManager/client/src/hooks/use-pets").Gender | null | undefined'.
      Type '"other"' is not assignable to type 'Gender | null | undefined'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:288:32

    286 |                   await handleUpdatePet(data);
    287 |                 } else {
  > 288 |                   await addPet(data);
        |                                ^^^^
    289 |                 }
    290 |                 
    291 |                 await refetch();

 ERROR(TypeScript)  Type '{ createdAt: Date; petCount: number; gender: string | null; id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }[]' is not assignable to type '{ id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; gender: "other" | "male" | "female" | null; petCount: number; createdAt: string | null; updatedAt: string | null; }[]'.
  Property 'updatedAt' is missing in type '{ createdAt: Date; petCount: number; gender: string | null; id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; }' but required in type '{ id: number; firebaseId: string | null; firstName: string; lastName: string; email: string; phone: string; address: string | null; gender: "other" | "male" | "female" | null; petCount: number; createdAt: string | null; updatedAt: string | null; }'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:311:13

    309 |             }}
    310 |             onCancel={() => setShowPetModal(false)}
  > 311 |             customers={customers}
        |             ^^^^^^^^^
    312 |             defaultValues={selectedPet ?? undefined}
    313 |             customerId={selectedPet?.customerId ?? (customers?.[0]?.firebaseId ?? '')}
    314 |             isEditing={!!selectedPet}

 ERROR(TypeScript)  Type 'Pet | undefined' is not assignable to type 'Partial<InsertPet> | undefined'.
  Type 'Pet' is not assignable to type 'Partial<InsertPet>'.
    Types of property 'weight' are incompatible.
      Type 'number | null' is not assignable to type 'string | null | undefined'.
        Type 'number' is not assignable to type 'string'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:312:13

    310 |             onCancel={() => setShowPetModal(false)}
    311 |             customers={customers}
  > 312 |             defaultValues={selectedPet ?? undefined}
        |             ^^^^^^^^^^^^^
    313 |             customerId={selectedPet?.customerId ?? (customers?.[0]?.firebaseId ?? '')}
    314 |             isEditing={!!selectedPet}
    315 |           />

 ERROR(TypeScript)  No overload matches this call.
  Overload 1 of 2, '(value: { id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ id: string; email: string; name: string; role: "staff" | "admin"; }' is not assignable to parameter of type '{ id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }'.
      Property 'phone' is missing in type '{ id: string; email: string; name: string; role: "staff" | "admin"; }' but required in type '{ id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }'.
  Overload 2 of 2, '(values: { id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Object literal may only specify known properties, and 'id' does not exist in type '{ id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }[]'.
 FILE  /home/runner/GroomITManager/server/auth.ts:85:30

    83 |
    84 |     if (!existingUser) {
  > 85 |       await db.insert(users).values({
       |                              ^^^^^^
    86 |         id: user.id,
    87 |         email: user.email,
    88 |         name: user.name,

 ERROR(TypeScript)  Type 'string' is not assignable to type '"staff" | "admin"'.
 FILE  /home/runner/GroomITManager/server/auth.ts:168:11

    166 |           email: decodedToken.email || '',
    167 |           name: decodedToken.name || decodedToken.email || '',
  > 168 |           role: existingUser?.role || 'staff'
        |           ^^^^
    169 |         };
    170 |
    171 |         next();

[TypeScript] Found 58 errors. Watching for file changes.