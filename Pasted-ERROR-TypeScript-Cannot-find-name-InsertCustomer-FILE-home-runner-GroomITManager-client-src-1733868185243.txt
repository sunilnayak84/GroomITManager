ERROR(TypeScript)  Cannot find name 'InsertCustomer'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:13:34

    11 |
    12 |   const addCustomerMutation = useMutation({
  > 13 |     mutationFn: async (customer: InsertCustomer) => {
       |                                  ^^^^^^^^^^^^^^
    14 |       // Detailed validation and logging
    15 |       const validationErrors: string[] = [];
    16 |

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:92:13

    90 |     onSuccess: () => {
    91 |       queryClient.invalidateQueries({ queryKey: ["customers"] });
  > 92 |       toast.success("Customer added successfully");
       |             ^^^^^^^
    93 |     },
    94 |     onError: (error) => {
    95 |       console.error('ADD_CUSTOMER: Mutation error', { error });

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:96:13

    94 |     onError: (error) => {
    95 |       console.error('ADD_CUSTOMER: Mutation error', { error });
  > 96 |       toast.error(
       |             ^^^^^
    97 |         error instanceof Error 
    98 |           ? error.message 
    99 |           : "Failed to add customer. Please try again."

 ERROR(TypeScript)  This comparison appears to be unintentional because the types 'number' and 'string' have no overlap.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:144:33

    142 |       // Optimistically update the cache
    143 |       queryClient.setQueryData<Customer[]>(["customers"], old => 
  > 144 |         old?.filter(customer => customer.id !== deletedId) || []
        |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    145 |       );
    146 |
    147 |       return { previousCustomers };

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:151:13

    149 |     onSuccess: (deletedId) => {
    150 |       console.log('Delete mutation succeeded for customer:', deletedId);
  > 151 |       toast.success("Customer deleted successfully");
        |             ^^^^^^^
    152 |     },
    153 |     onError: (error, _, context) => {
    154 |       console.error('Delete mutation error:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:159:13

    157 |         queryClient.setQueryData(["customers"], context.previousCustomers);
    158 |       }
  > 159 |       toast.error(
        |             ^^^^^
    160 |         error instanceof Error 
    161 |           ? error.message 
    162 |           : "Unable to delete customer"

 ERROR(TypeScript)  Conversion of type '{ createdAt: Date | undefined; id: string; }' to type '{ id: number; address: string | null; email: string; gender: string | null; createdAt: Date | null; firstName: string; lastName: string; firebaseId: string | null; phone: string; petCount: number; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ createdAt: Date | undefined; id: string; }' is missing the following properties from type '{ id: number; address: string | null; email: string; gender: string | null; createdAt: Date | null; firstName: string; lastName: string; firebaseId: string | null; phone: string; petCount: number; }': address, email, gender, firstName, and 4 more.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:179:16

    177 |       const customers = snapshot.docs.map(doc => {
    178 |         const customerData = doc.data();
  > 179 |         return {
        |                ^
  > 180 |           id: doc.id,
        | ^^^^^^^^^^^^^^^^^^^^^
  > 181 |           ...customerData,
        | ^^^^^^^^^^^^^^^^^^^^^
  > 182 |           createdAt: customerData.createdAt 
        | ^^^^^^^^^^^^^^^^^^^^^
  > 183 |             ? new Date(customerData.createdAt) 
        | ^^^^^^^^^^^^^^^^^^^^^
  > 184 |             : undefined
        | ^^^^^^^^^^^^^^^^^^^^^
  > 185 |         } as Customer;
        | ^^^^^^^^^^^^^^^^^^^^^^
    186 |       });
    187 |
    188 |       // Update customers in cache

 ERROR(TypeScript)  Argument of type 'number' is not assignable to parameter of type 'string'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:212:35

    210 |         const updatedCustomers = currentCustomers.map(customer => ({
    211 |           ...customer,
  > 212 |           petCount: petCounts.get(customer.id) || 0
        |                                   ^^^^^^^^^^^
    213 |         }));
    214 |
    215 |         // Update cache without triggering a refetch

 ERROR(TypeScript)  Type 'string' is not assignable to type 'number'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:237:13

    235 |           const customerData = doc.data();
    236 |           const customer = {
  > 237 |             id: doc.id,
        |             ^^
    238 |             firebaseId: doc.id, // Explicitly add firebaseId for component usage
    239 |             ...customerData,
    240 |             // Ensure createdAt is a valid Date object

 ERROR(TypeScript)  Property 'firstName' does not exist on type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:250:31

    248 |             id: customer.id,
    249 |             firebaseId: customer.firebaseId,
  > 250 |             name: `${customer.firstName} ${customer.lastName}`
        |                               ^^^^^^^^^
    251 |           });
    252 |           return customer;
    253 |         });

 ERROR(TypeScript)  Property 'lastName' does not exist on type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:250:53

    248 |             id: customer.id,
    249 |             firebaseId: customer.firebaseId,
  > 250 |             name: `${customer.firstName} ${customer.lastName}`
        |                                                     ^^^^^^^^
    251 |           });
    252 |           return customer;
    253 |         });

 ERROR(TypeScript)  Property 'firstName' does not exist on type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:258:50

    256 |           customerCount: customers.length,
    257 |           customerIds: customers.map(c => c.id),
  > 258 |           customerNames: customers.map(c => `${c.firstName} ${c.lastName}`)
        |                                                  ^^^^^^^^^
    259 |         });
    260 |
    261 |         return customers;

 ERROR(TypeScript)  Property 'lastName' does not exist on type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-customers.ts:258:65

    256 |           customerCount: customers.length,
    257 |           customerIds: customers.map(c => c.id),
  > 258 |           customerNames: customers.map(c => `${c.firstName} ${c.lastName}`)
        |                                                                 ^^^^^^^^
    259 |         });
    260 |
    261 |         return customers;

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:99:13

     97 |       await setDoc(docRef, firestoreData);
     98 |       await queryClient.invalidateQueries({ queryKey: ['services'] });
  >  99 |       toast.success('Service added successfully');
        |             ^^^^^^^
    100 |       return newService;
    101 |     } catch (error) {
    102 |       console.error('ADD_SERVICE: Error adding service:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:103:13

    101 |     } catch (error) {
    102 |       console.error('ADD_SERVICE: Error adding service:', error);
  > 103 |       toast.error(error instanceof Error ? error.message : 'Failed to add service');
        |             ^^^^^
    104 |       throw error;
    105 |     }
    106 |   };

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:129:13

    127 |       await updateDoc(serviceRef, updatePayload);
    128 |       await queryClient.invalidateQueries({ queryKey: ['services'] });
  > 129 |       toast.success('Service updated successfully');
        |             ^^^^^^^
    130 |       return true;
    131 |     } catch (error) {
    132 |       console.error('UPDATE_SERVICE: Error updating service:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:133:13

    131 |     } catch (error) {
    132 |       console.error('UPDATE_SERVICE: Error updating service:', error);
  > 133 |       toast.error(error instanceof Error ? error.message : 'Failed to update service');
        |             ^^^^^
    134 |       throw error;
    135 |     }
    136 |   };

 ERROR(TypeScript)  Property 'success' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:143:13

    141 |       await deleteDoc(serviceRef);
    142 |       await queryClient.invalidateQueries({ queryKey: ['services'] });
  > 143 |       toast.success('Service deleted successfully');
        |             ^^^^^^^
    144 |       return true;
    145 |     } catch (error) {
    146 |       console.error('DELETE_SERVICE: Error deleting service:', error);

 ERROR(TypeScript)  Property 'error' does not exist on type '({ ...props }: Toast) => { id: string; dismiss: () => void; update: (props: ToasterToast) => void; }'.
 FILE  /home/runner/GroomITManager/client/src/hooks/use-services.ts:147:13

    145 |     } catch (error) {
    146 |       console.error('DELETE_SERVICE: Error deleting service:', error);
  > 147 |       toast.error(error instanceof Error ? error.message : 'Failed to delete service');
        |             ^^^^^
    148 |       throw error;
    149 |     }
    150 |   };

 ERROR(TypeScript)  Argument of type '{ email: string; name: string; phone: string; role: string; isActive: boolean; createdAt: Date; branchId: number | null; isGroomer: boolean; specialties: string[]; petTypePreferences: string[]; ... 4 more ...; updatedAt: null; }' is not assignable to parameter of type 'WithFieldValue<{ id: string; role: string; email: string; name: string; isActive: boolean; createdAt: Date | null; updatedAt: Date | null; phone: string; branchId: number | null; isGroomer: boolean; ... 5 more ...; maxDailyAppointments: number | null; }>'.
  Property 'id' is missing in type '{ email: string; name: string; phone: string; role: string; isActive: boolean; createdAt: Date; branchId: number | null; isGroomer: boolean; specialties: string[]; petTypePreferences: string[]; ... 4 more ...; updatedAt: null; }' but required in type '{ id: string | FieldValue; role: string | FieldValue; email: string | FieldValue; name: string | FieldValue; isActive: FieldValue | WithFieldValue<...>; ... 10 more ...; maxDailyAppointments: FieldValue | WithFieldValue<...>; }'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:40:27

    38 |     };
    39 |
  > 40 |     await setDoc(userRef, userData);
       |                           ^^^^^^^^
    41 |     return true;
    42 |   } catch (error) {
    43 |     console.error('Error creating user document:', error);

 ERROR(TypeScript)  Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Omit<{ id: number; image: string | null; type: string; name: string; customerId: number; breed: string; dateOfBirth: string | null; age: number | null; gender: string | null; weight: string | null; weightUnit: string | null; notes: string | null; createdAt: Date | null; firebaseId: string | null; }, "id">'.
  No index signature with a parameter of type 'string' was found on type 'Omit<{ id: number; image: string | null; type: string; name: string; customerId: number; breed: string; dateOfBirth: string | null; age: number | null; gender: string | null; weight: string | null; weightUnit: string | null; notes: string | null; createdAt: Date | null; firebaseId: string | null; }, "id">'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:117:12

    115 |     const requiredFields = ['name', 'type', 'breed', 'customerId'];
    116 |     for (const field of requiredFields) {
  > 117 |       if (!pet[field]) {
        |            ^^^^^^^^^^
    118 |         throw new Error(`Missing required field: ${field}`);
    119 |       }
    120 |     }

 ERROR(TypeScript)  No overload matches this call.
  Overload 1 of 3, '(firestore: Firestore, path: string, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>', gave the following error.
    Argument of type 'CollectionReference<DocumentData, DocumentData>' is not assignable to parameter of type 'Firestore'.
      Type 'CollectionReference<DocumentData, DocumentData>' is missing the following properties from type 'Firestore': app, toJSON
  Overload 2 of 3, '(reference: CollectionReference<DocumentData, DocumentData>, path?: string | undefined, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>', gave the following error.
    Argument of type 'number' is not assignable to parameter of type 'string'.
  Overload 3 of 3, '(reference: DocumentReference<DocumentData, DocumentData>, path: string, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>', gave the following error.
    Argument of type 'CollectionReference<DocumentData, DocumentData>' is not assignable to parameter of type 'DocumentReference<DocumentData, DocumentData>'.
      Types of property 'type' are incompatible.
        Type '"collection"' is not assignable to type '"document"'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:123:25

    121 |
    122 |     // Create references
  > 123 |     const customerRef = doc(customersCollection, pet.customerId);
        |                         ^^^
    124 |     const petRef = doc(petsCollection);
    125 |     const submissionId = pet.submissionId || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    126 |

 ERROR(TypeScript)  Property 'submissionId' does not exist on type 'Omit<{ id: number; image: string | null; type: string; name: string; customerId: number; breed: string; dateOfBirth: string | null; age: number | null; gender: string | null; weight: string | null; weightUnit: string | null; notes: string | null; createdAt: Date | null; firebaseId: string | null; }, "id">'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:125:30

    123 |     const customerRef = doc(customersCollection, pet.customerId);
    124 |     const petRef = doc(petsCollection);
  > 125 |     const submissionId = pet.submissionId || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        |                              ^^^^^^^^^^^^
    126 |
    127 |     // Use a transaction to create pet and update customer count atomically
    128 |     const result = await runTransaction(db, async (transaction) => {

 ERROR(TypeScript)  Argument of type 'Query<DocumentData, DocumentData>' is not assignable to parameter of type 'DocumentReference<DocumentData, DocumentData>'.
  Type 'Query<DocumentData, DocumentData>' is missing the following properties from type 'DocumentReference<DocumentData, DocumentData>': id, path, parent
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:138:57

    136 |         // Check for duplicate submission
    137 |         const duplicateQuery = query(petsCollection, where('submissionId', '==', submissionId));
  > 138 |         const duplicateSnapshot = await transaction.get(duplicateQuery);
        |                                                         ^^^^^^^^^^^^^^
    139 |         
    140 |         if (!duplicateSnapshot.empty) {
    141 |           console.log('FIRESTORE: Duplicate submission detected', {

 ERROR(TypeScript)  Property 'empty' does not exist on type 'DocumentSnapshot<DocumentData, DocumentData>'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:140:32

    138 |         const duplicateSnapshot = await transaction.get(duplicateQuery);
    139 |         
  > 140 |         if (!duplicateSnapshot.empty) {
        |                                ^^^^^
    141 |           console.log('FIRESTORE: Duplicate submission detected', {
    142 |             submissionId
    143 |           });

 ERROR(TypeScript)  Property 'docs' does not exist on type 'DocumentSnapshot<DocumentData, DocumentData>'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:144:50

    142 |             submissionId
    143 |           });
  > 144 |           const duplicateDoc = duplicateSnapshot.docs[0];
        |                                                  ^^^^
    145 |           return { 
    146 |             isDuplicate: true, 
    147 |             existingPet: { 

 ERROR(TypeScript)  'id' is specified more than once, so this usage will be overwritten.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:187:13

    185 |           success: true, 
    186 |           pet: { 
  > 187 |             id: petRef.id, 
        |             ^^^^^^^^^^^^^
    188 |             ...petData 
    189 |           } 
    190 |         };

 ERROR(TypeScript)  Type 'string | number | Date | null' is not assignable to type 'never'.
  Type 'null' is not assignable to type 'never'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:244:9

    242 |     const cleanedData = Object.entries(processedData).reduce((acc, [key, value]) => {
    243 |       if (value !== undefined) {
  > 244 |         acc[key as keyof typeof processedData] = value;
        |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    245 |       }
    246 |       return acc;
    247 |     }, {} as Partial<Customer> & { updatedAt: string });

 ERROR(TypeScript)  Type 'string | number | Date | null' is not assignable to type 'never'.
  Type 'null' is not assignable to type 'never'.
 FILE  /home/runner/GroomITManager/client/src/lib/firestore.ts:335:9

    333 |     const cleanedData = Object.entries(updateData).reduce((acc, [key, value]) => {
    334 |       if (value !== undefined) {
  > 335 |         acc[key as keyof typeof updateData] = value;
        |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    336 |       }
    337 |       return acc;
    338 |     }, {} as Partial<Pet> & { updatedAt: string });

 ERROR(TypeScript)  Property 'updatedAt' does not exist on type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:98:27

     96 |       gender: customer.gender as "male" | "female" | "other" | null,
     97 |       createdAt: typeof customer.createdAt === 'string' ? customer.createdAt : new Date().toISOString(),
  >  98 |       updatedAt: customer.updatedAt ? new Date(customer.updatedAt).toISOString() : null,
        |                           ^^^^^^^^^
     99 |       petCount: customer.petCount || 0
    100 |     }));
    101 |   }, [customersQuery.data]);

 ERROR(TypeScript)  Property 'updatedAt' does not exist on type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:98:57

     96 |       gender: customer.gender as "male" | "female" | "other" | null,
     97 |       createdAt: typeof customer.createdAt === 'string' ? customer.createdAt : new Date().toISOString(),
  >  98 |       updatedAt: customer.updatedAt ? new Date(customer.updatedAt).toISOString() : null,
        |                                                         ^^^^^^^^^
     99 |       petCount: customer.petCount || 0
    100 |     }));
    101 |   }, [customersQuery.data]);

 ERROR(TypeScript)  Type '{ id: string; gender: "male" | "female" | "other" | null; createdAt: string; updatedAt: string | null; petCount: any; firebaseId: string; }[]' is not assignable to type 'Customer[]'.
  Type '{ id: string; gender: "male" | "female" | "other" | null; createdAt: string; updatedAt: string | null; petCount: any; firebaseId: string; }' is missing the following properties from type 'Customer': firstName, lastName, email, phone, address
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:529:13

    527 |           <DataTable 
    528 |             columns={columns} 
  > 529 |             data={customersData} 
        |             ^^^^
    530 |           />
    531 |         )}
    532 |       </div>

 ERROR(TypeScript)  Cannot find name 'InsertPet'.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:624:36

    622 |                   try {
    623 |                     // Ensure proper type conversion and validation
  > 624 |                     const petData: InsertPet = {
        |                                    ^^^^^^^^^
    625 |                       name: data.name,
    626 |                       type: data.type,
    627 |                       breed: data.breed,

 ERROR(TypeScript)  Type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }[]' is not assignable to type '{ id: string; address: string | null; email: string; gender: "other" | "male" | "female" | null; createdAt: string; updatedAt: string | null; firstName: string; lastName: string; firebaseId: string | null; phone: string; petCount: number; }[]'.
  Type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }' is missing the following properties from type '{ id: string; address: string | null; email: string; gender: "other" | "male" | "female" | null; createdAt: string; updatedAt: string | null; firstName: string; lastName: string; firebaseId: string | null; phone: string; petCount: number; }': address, email, updatedAt, firstName, and 2 more.
 FILE  /home/runner/GroomITManager/client/src/pages/CustomersPage.tsx:677:17

    675 |                 hideCustomerField={true}
    676 |                 customerId={selectedCustomer.id}
  > 677 |                 customers={customersQuery.data || []}
        |                 ^^^^^^^^^
    678 |                 onCancel={() => setShowAddPet(false)}
    679 |               />
    680 |             </div>

 ERROR(TypeScript)  Type 'string | null' is not assignable to type 'number | null'.
  Type 'string' is not assignable to type 'number'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:83:7

    81 |       age: formData.age || null,
    82 |       gender: formData.gender || null,
  > 83 |       weight: formData.weight || null,
       |       ^^^^^^
    84 |       weightUnit: formData.weightUnit,
    85 |       notes: formData.notes || null,
    86 |       image: typeof formData.image === 'string' ? formData.image : selectedPet.image,

 ERROR(TypeScript)  Type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }[]' is not assignable to type '{ id: string; address: string | null; email: string; gender: "other" | "male" | "female" | null; createdAt: string; updatedAt: string | null; firstName: string; lastName: string; firebaseId: string | null; phone: string; petCount: number; }[]'.
  Type '{ createdAt: Date; petCount: any; gender: any; id: string; firebaseId: string; }' is missing the following properties from type '{ id: string; address: string | null; email: string; gender: "other" | "male" | "female" | null; createdAt: string; updatedAt: string | null; firstName: string; lastName: string; firebaseId: string | null; phone: string; petCount: number; }': address, email, updatedAt, firstName, and 2 more.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:311:13

    309 |             }}
    310 |             onCancel={() => setShowPetModal(false)}
  > 311 |             customers={customers}
        |             ^^^^^^^^^
    312 |             defaultValues={selectedPet ?? undefined}
    313 |             customerId={selectedPet?.customerId ?? (customers?.[0]?.firebaseId ?? '')}
    314 |             isEditing={!!selectedPet}

 ERROR(TypeScript)  Type 'Pet | undefined' is not assignable to type 'Partial<{ image: string | File | null; type: "other" | "dog" | "cat" | "bird" | "fish"; name: string; customerId: string; breed: string; dateOfBirth: string | null; age: number | null; ... 5 more ...; submissionId?: string | undefined; }> | undefined'.
  Type 'Pet' is not assignable to type 'Partial<{ image: string | File | null; type: "other" | "dog" | "cat" | "bird" | "fish"; name: string; customerId: string; breed: string; dateOfBirth: string | null; age: number | null; ... 5 more ...; submissionId?: string | undefined; }>'.
    Types of property 'weight' are incompatible.
      Type 'number | null' is not assignable to type 'string | null | undefined'.
        Type 'number' is not assignable to type 'string'.
 FILE  /home/runner/GroomITManager/client/src/pages/PetsPage.tsx:312:13

    310 |             onCancel={() => setShowPetModal(false)}
    311 |             customers={customers}
  > 312 |             defaultValues={selectedPet ?? undefined}
        |             ^^^^^^^^^^^^^
    313 |             customerId={selectedPet?.customerId ?? (customers?.[0]?.firebaseId ?? '')}
    314 |             isEditing={!!selectedPet}
    315 |           />

 ERROR(TypeScript)  No overload matches this call.
  Overload 1 of 2, '(value: { id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ id: string; email: string; name: string; role: "staff" | "admin"; }' is not assignable to parameter of type '{ id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }'.
      Property 'phone' is missing in type '{ id: string; email: string; name: string; role: "staff" | "admin"; }' but required in type '{ id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }'.
  Overload 2 of 2, '(values: { id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Object literal may only specify known properties, and 'id' does not exist in type '{ id: string | SQL<unknown> | Placeholder<string, any>; name: string | SQL<unknown> | Placeholder<string, any>; email: string | SQL<unknown> | Placeholder<string, any>; ... 12 more ...; maxDailyAppointments?: number | ... 3 more ... | undefined; }[]'.
 FILE  /home/runner/GroomITManager/server/auth.ts:85:30

    83 |
    84 |     if (!existingUser) {
  > 85 |       await db.insert(users).values({
       |                              ^^^^^^
    86 |         id: user.id,
    87 |         email: user.email,
    88 |         name: user.name,

 ERROR(TypeScript)  Type 'string' is not assignable to type '"staff" | "admin"'.
 FILE  /home/runner/GroomITManager/server/auth.ts:168:11

    166 |           email: decodedToken.email || '',
    167 |           name: decodedToken.name || decodedToken.email || '',
  > 168 |           role: existingUser?.role || 'staff'
        |           ^^^^
    169 |         };
    170 |
    171 |         next();

[TypeScript] Found 39 errors. Watching for file changes.
